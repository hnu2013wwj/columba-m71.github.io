<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Personal Blog</title>
        <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
        <link>http://localhost:4000/</link>
        <description></description>
        <pubDate>Thu, 27 Sep 2018 19:20:39 +0800</pubDate>
        
        <item>
            <title>ISA Wars</title>
            <link>/2018/09/01/ISA-Wars-Understanding-the-Relevance-of-ISA-being-RISC-or-CISC-to-Performance,-Power,-and-Energy-on-Modern-Architecture.html</link>
            <guid isPermaLink="true">/2018/09/01/ISA-Wars-Understanding-the-Relevance-of-ISA-being-RISC-or-CISC-to-Performance,-Power,-and-Energy-on-Modern-Architecture.html</guid>
            <description>&lt;h2 id=&quot;isa-wars-understanding-the-relevance-of-isa-being-risc-or-cisc-to-performance-power-and-energy-on-modern-architectures指令集战争理解现代risc或cisc处理器架构与性能能耗和能效的相关性&quot;&gt;ISA Wars: Understanding the Relevance of ISA being RISC or CISC to Performance, Power, and Energy on Modern Architectures(指令集战争：理解现代RISC或CISC处理器架构与性能、能耗和能效的相关性)&lt;/h2&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;0x00-引言&quot;&gt;0x00 引言&lt;/h2&gt;

&lt;p&gt;RISC和CISC的比较来源已久，早期的比较大多都集中在性能方面。一般情况下，会认为CISC处理器的性能更加好，而能耗和能效高价低，RISC反之，当然这种说明不一定准确。而现在，CPU架构发展已经相对成熟，单核性能每年增长的幅度很小，CPU多核化，智能手机等移动设备的CPU越来越受关注。那么在CPU发展变化之后，RISC和CISC的指令集类型对处理器的各个关键指标又有什么样的影响呢？这里我们来看一看TPCS 2015上的一篇文章[1]。这篇paper主要做的就是:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; We present an exhaustive and rigorous analysis using workloads that span smart-phone, desktop, and server applications. In our study, we are primarily interested in whether and, if so, how the ISA being RISC or CISC impacts performance and power.
 通过运行智能手机、桌面和服务器应用程序等的不同的应用程序，我们描述了一个详尽的、严格的分析。在我们的研究中，感兴趣的主要是RISC或CISC指令集是否对性能、能耗造成了影响，如果是，是如何影响的。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;0x01-所研究的平台&quot;&gt;0x01 所研究的平台&lt;/h2&gt;

&lt;p&gt;​    这篇paper主要讨论了x86、ARM和MIPS架构。讨论的处理器信息如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ISA-Wars-table-2png.png&quot; alt=&quot;ISA-Wars-table-2png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Width: 能同时发射几条指令;
Issue: 指令发射(这里表示的是顺序发射还是乱序发射)；
OoO: 乱序（out-of-order)；
In Order: 顺序；
L1D: 一级数据缓存；
L1I: 一级指令缓存；
AVX，SSE：x86架构的SIMD(单指令多数据)指令集拓展;
NEON: ARM架构的SIMD指令集拓展;
关于这类处理器效果的基本知识，可以参考参考文献[2,3].
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;0x02-key-finds&quot;&gt;0x02 Key Finds&lt;/h2&gt;

&lt;p&gt;关于论文具体是如何做出评价，这里就不具体讨论了，有兴趣的可参考原paper，这里只总结一下论文中的key finds（图表也不一一给出了，比较多，复杂。还是可以参考原论文）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-1-from-execution-time-comparison从执行时间方面&quot;&gt;Key Finding 1: (from Execution Time Comparison，从执行时间方面)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Large performance gaps exist across the seven platforms studied, as expected, since frequency ranges from 600MHz to 3.4GHz and microarchitectures are very different.
  因为CPU频率和微架构存在巨大的差异，CPU之间也存在巨大性能差异。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-2-from-cycle-count-comparison从运行周期方面&quot;&gt;Key Finding 2: (from Cycle-Count Comparison，从运行周期方面)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Performance gaps, when normalized to cycle counts, are predominantly less than 3× when comparing in-order cores to each other and out-of-order cores to each other.
  性能之间的差异，当规范化到执行周期之后，顺序执行的CPU之间、乱序执行的CPU之间的性能差距不超过3x。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-3-from-instruction-count-comparison从执行的指令数量方面&quot;&gt;Key Finding 3: (from Instruction Count Comparison,从执行的指令数量方面)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Despite similar instruction counts across ISAs, CPI can be less on x86 implementations across all suites (as shown in Table VI). This finding disproves prior belief that CISC implementations should have a higher CPI than RISC implementations (due to the complex instructions in CISC). Microarchitecture is the dominant factor that affects performance, not the ISA.
  尽管不同的指令集的CPU执行的指令数相似，但是x86架构的CPI在各个测试中都更小。这个发现证明了之前关于CISC架构的处理器比RISC架构的处理器会有更高的CPI的观点是错误的(因为CISC架构的处理器指令更加复杂)。微架构是影响性能的主要因素，而不是指令集。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-4-from-instruction-format-and-mix从指令格式和各指令组合&quot;&gt;Key Finding 4: (from Instruction Format and Mix,从指令格式和各指令组合)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Combining the instruction count and mix findings, we conclude that ISA effects are indistinguishable between x86 and ARM implementations. Due to infrastructure limitations, we do not have enough data to make the same claim for the MIPS platform. However, we suspect that instruction count differences on MIPS platform are due to system software issues and not due to the ISA.
  组合指令数和指令组合的结果，我们总结出指令集的作用在x86和ARM上无法区分。因为基础设施的限制，我们没有足够的数据对MIPS架构做出同样的总结。然而，我们推测MIPS平台上的指令数的不同是由于系统软件的问题而不是因为指令集。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-5-from-microarchitecture从微架构方面&quot;&gt;Key Finding 5: (from microarchitecture,从微架构方面)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  The microarchitecture has the dominant impact on performance. The ARM, x86, and MIPS architectures have similar instruction counts. The microarchitecture, not the ISA, is responsible for performance differences.
  微架构对性能起支配性的作用。ARM，x86和MIPS有相似的指令数。微架构是造成性能的原因而不是指令集。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-6-from-isa-influence-on-microarchitecture-从指令集对微架构的影响&quot;&gt;Key Finding 6: (from ISA Influence on Microarchitecture, 从指令集对微架构的影响)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  As shown in Table VIII, there are significant differences in microarchitectures. Drawing on instruction mix and instruction count analysis, we feel that the only case where the ISA forces larger structures is on the ROB size, physical rename file size, and scheduler size since there are almost the same number of x86 micro-ops in flight compared to ARM and MIPS instructions. The difference is small enough that we argue it is not necessary to quantify further. Beyond the translation to micro-ops, pipelined implementation of an x86 ISA introduces no additional overheads over an ARM or MIPS ISA for these performance levels.
  如表8所示，微架构之间存在明显的不同。依据指令组合和指令数分析，我们认为指令集迫使更大的结构只在ROB尺寸，物理重命名文件大小和调度器大小，因为运行中x86微操作的数量和ARM、MIPS几乎相同。我们认为没有必要进一步量化，因为差别很小。除了转化到微操作之外，x86指令集流水线的实现在这些性能级别上不会在ARM或MIPS的实现上引入额外的开销。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/ISA-Wars-table-8.png&quot; alt=&quot;ISA-Wars-table-8&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-7-from-average-power从平均能耗方面&quot;&gt;Key Finding 7: (from Average Power,从平均能耗方面)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Power consumption does not have a direct correlation to the ISA being RISC or CISC.
 能源消耗和指令集在RISC或CISC没有之间的关联。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-8-from-average-technology-independent-power从技术无关的拼接能耗方面&quot;&gt;Key Finding 8: (from Average Technology Independent Power,从技术无关的拼接能耗方面)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  the choice of power- or performance-optimized core designs impacts core power use more than does ISA.
  能耗或性能优化的核心设计选择造成的能耗影响大于指令集的影响。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-9-from--average-energy-从平均能效方面&quot;&gt;Key Finding 9: (from  Average Energy, 从平均能效方面)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Since power and performance are both primarily design choices, energy use is also primarily impacted by design choice. ISA’s impact on energy is insignificant.
 因为能耗和性能都是主要的CPU设计选择，能源用途也主要被CPU设计上的选择影响。指令集的对能效的影响是微不足道的。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-10-from-power-performance-tradeoffs-从能耗性能权衡方面&quot;&gt;Key Finding 10: (from Power-Performance Tradeoffs, 从能耗、性能权衡方面)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Regardless of ISA or energy-efficiency, high-performance processors require more power than lower-performance processors. They follow well-established cubic power/performance tradeoffs regardless of ISA.
  不考虑指令集或能效的情况下，高性能处理器比低性能的处理器有更高的能耗。不考虑指令集情况下，他们服从公认的三次方的功耗/性能比。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;key-finding-11-from-energy-performance-tradeoffs-从能效性能权衡方面&quot;&gt;Key Finding 11: (from Energy-Performance Tradeoffs, 从能效、性能权衡方面)&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;It is the microarchitecture and design methodologies that really matter.
微架构和设计上的选择非常重要。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x03-总结&quot;&gt;0x03 总结&lt;/h2&gt;

&lt;p&gt;​    从本文的一些总结可以看出：处理器的性能、能耗和能效对于处理器的指令集是CISC或者RISC没有多大的联系。这篇paper通过使用一些新的方法，测量现代的一些处理器的性能、功耗和能效的特点(这些处理器的年代在2010年-2013年左右，大约5-8年前)，更加严谨地得出来这样一个观点。关于paper使用的具体方法、工具和测量数据，有兴趣的可以阅读原文。&lt;/p&gt;

&lt;h2 id=&quot;0x04-参考文献&quot;&gt;0x04 参考文献&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Emily Blem, Jaikrishnan Menon, Thiruvengadam Vijayaraghavan, and Karthikeyan Sankaralingam. 2015. ISA wars: Understanding the relevance of ISA being RISC or CISC to performance, power, and energy on modern architectures. ACM Trans. Comput. Syst. 33, 1, Article 3 (March 2015), 34 pages.  DOI: http://dx.doi.org/10.1145/2699682&lt;/li&gt;
&lt;/ol&gt;

</description>
            <pubDate>Sat, 01 Sep 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>Sample post</title>
            <link>/2014/11/30/sample-post.html</link>
            <guid isPermaLink="true">/2014/11/30/sample-post.html</guid>
            <description>&lt;p&gt;Consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. 
Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. 
&lt;!--more--&gt;
Donec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consectetur adipiscing elit&lt;/li&gt;
  &lt;li&gt;Donec a diam lectus&lt;/li&gt;
  &lt;li&gt;Sed sit amet ipsum mauris&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.&lt;/p&gt;

&lt;p&gt;Nunc diam velit, adipiscing ut tristique vitae, sagittis vel odio. Maecenas convallis ullamcorper ultricies. Curabitur ornare, ligula &lt;em&gt;semper consectetur sagittis&lt;/em&gt;, nisi diam iaculis velit, id fringilla sem nunc vel mi. Nam dictum, odio nec pretium volutpat, arcu ante placerat erat, non tristique elit urna et turpis. Quisque mi metus, ornare sit amet fermentum et, tincidunt et orci. Fusce eget orci a orci congue vestibulum.&lt;/p&gt;

&lt;p&gt;Ut dolor diam, elementum et vestibulum eu, porttitor vel elit. Curabitur venenatis pulvinar tellus gravida ornare. Sed et erat faucibus nunc euismod ultricies ut id justo. Nullam cursus suscipit nisi, et ultrices justo sodales nec. Fusce venenatis facilisis lectus ac semper. Aliquam at massa ipsum. Quisque bibendum purus convallis nulla ultrices ultricies. Nullam aliquam, mi eu aliquam tincidunt, purus velit laoreet tortor, viverra pretium nisi quam vitae mi. Fusce vel volutpat elit. Nam sagittis nisi dui.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suspendisse lectus leo, consectetur in tempor sit amet, placerat quis neque&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam luctus porttitor lorem, sed suscipit est rutrum non. Curabitur lobortis nisl a enim congue semper. Aenean commodo ultrices imperdiet. Vestibulum ut justo vel sapien venenatis tincidunt.&lt;/p&gt;

&lt;p&gt;Phasellus eget dolor sit amet ipsum dapibus condimentum vitae quis lectus. Aliquam ut massa in turpis dapibus convallis. Praesent elit lacus, vestibulum at malesuada et, ornare et est. Ut augue nunc, sodales ut euismod non, adipiscing vitae orci. Mauris ut placerat justo. Mauris in ultricies enim. Quisque nec est eleifend nulla ultrices egestas quis ut quam. Donec sollicitudin lectus a mauris pulvinar id aliquam urna cursus. Cras quis ligula sem, vel elementum mi. Phasellus non ullamcorper urna.&lt;/p&gt;
</description>
            <pubDate>Sun, 30 Nov 2014 00:00:00 +0800</pubDate>
        </item>
        
    </channel>
</rss>